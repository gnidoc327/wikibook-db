[project]
name = "wikibook-25-db"
version = "0.1.0"
description = ""
authors = [
    {name = "gnidoc327",email = "gnidoc327@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.11,<=3.13"
dependencies = [
    "uvicorn (>=0.34.0,<0.35.0)",
    "fastapi[standard] (>=0.115.10,<0.116.0)",
    "asyncmy (>=0.2.10,<0.3.0)",
    "sqlalchemy (>=2.0.38,<3.0.0)",
    "pydantic (>=2.10.6,<3.0.0)",
    "pydantic-settings (>=2.8.1,<3.0.0)",
    "passlib[bcrypt] (>=1.7.4,<2.0.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.group.dev.dependencies]
anyio = "^4.8.0"
pytest = "^8.3.4"
asgi-lifespan = "^2.1.0"
pytest-asyncio = "^0.25.3"
pytest-xdist = "^3.6.1"
pytest-cov = "^6.0.0"
ruff = "^0.9.9"
black = "^25.1.0"


[tool.ruff]
fix = true
line-length = 88

[tool.ruff.lint]
# lint 관련 규칙 활성화
select = [
    "F",    # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "E",    # https://docs.astral.sh/ruff/rules/#error-e
    "N",    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "A",    # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "ARG",  # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "F401", # https://docs.astral.sh/ruff/rules/#pyflakes-f
]
ignore = [
    "E501", # https://docs.astral.sh/ruff/rules/line-too-long/
    "A003", # https://docs.astral.sh/ruff/rules/builtin-attribute-shadowing/
    "E711"  # https://docs.astral.sh/ruff/rules/none-comparison/
]
fixable = ["ALL"]

# _ 로 시작하는 변수는 사용하지 않아도 lint에서 에러로 처리하지 않음
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"


[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = [
    "tests"
]
asyncio_mode = "auto"
log_cli = true
# event loop를 session으로 처리하여 테스트 케이스마다 DB connection이 생성되지 않고 한번 생성한 connection 들을 공유하여 리소스를 효율화함
asyncio_default_fixture_loop_scope = "session"
# pytest 실행시 coverage report를 출력하도록 설정
addopts = "-s --cov --cov-report term --cov-report html"


# https://coverage.readthedocs.io/en/7.3.2/config.html
[tool.coverage.paths]
# coverage 대상 디렉토리
source = [
    "src/",
]

[tool.coverage.run]
# 조건문(ex - if, match)에 대한 coverage를 수집
branch = true
# coverage 제외할 목록
omit = [
    "src/main.py",
    "src/exception_handler.py",
    "tests/*"
]

[tool.coverage.report]
ignore_errors = false
skip_covered = true
skip_empty = true
# 테스트 케이스가 작성되지 않는 line을 표시
show_missing = true

[tool.coverage.html]
# coverage html report를 저장할 디렉토리.
directory = "htmlcov"
show_contexts = true
